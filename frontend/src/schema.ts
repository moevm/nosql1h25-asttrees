/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/repositories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createRepository"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/users/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["statsUsers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/users/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["queryUsers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/repositories/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["statsRepositories"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/repositories/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["queryRepositories"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/commits/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["statsCommits"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/commits/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["queryCommits"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/commit_files/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["statsCommitFiles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/commit_files/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["queryCommitFiles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/branches/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["statsBranches"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/branches/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["queryBranches"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/ast_trees/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["statsAstTrees"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/ast_trees/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["queryAstTrees"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/ast_nodes/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["statsAstNodes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/ast_nodes/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["queryAstNodes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/db/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["importDatabase"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/db/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["exportDatabase"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/commits/{commitId}/ast/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["search"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["authRegister"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["authLogin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/commits/{commitId}/branches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["setCommitBranches"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/branches/{branchId}/commits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["setBranchCommits"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/ast_nodes/{astNodeId}/children": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["setAstNodeChildren"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getCurrentUserInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateRepository"];
        trace?: never;
    };
    "/repositories/{repoId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateRepository_1"];
        trace?: never;
    };
    "/admin/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["patchUser"];
        trace?: never;
    };
    "/admin/repositories/{repositoryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["patchRepository"];
        trace?: never;
    };
    "/admin/commits/{commitId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["patchCommit"];
        trace?: never;
    };
    "/admin/commit_files/{commitFileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["patchCommitFile"];
        trace?: never;
    };
    "/admin/branches/{branchId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["patchBranch"];
        trace?: never;
    };
    "/admin/ast_trees/{astTreeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["patchAstTree"];
        trace?: never;
    };
    "/admin/ast_nodes/{astNodeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["patchAstNode"];
        trace?: never;
    };
    "/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUserInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/repositories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getRepositories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repositories/{repoId}/branches/{branchId}/commits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getBranchCommits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repositories/{repoId}/branches/{branchId}/commits/{commitId}/view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["viewRepository"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repositories/{repoId}/branches/{branchId}/commits/{commitId}/files/{commitFileId}/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["viewRepositoryFileContent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repositories/{repoId}/branches/{branchId}/commits/{commitId}/files/{commitFileId}/ast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["viewRepositoryFileAst"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/repositories/{repositoryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getRepository"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/commits/{commitId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getCommit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/commit_files/{commitFileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getCommitFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/branches/{branchId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getBranch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/ast_trees/{astTreeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAstTree"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/ast_nodes/{astNodeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAstNode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/ast_trees/{astTreeId}/view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["viewAstTree"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateRepositoryRequest: {
            /** Format: uri */
            originalLink: string;
            name: string;
            /** @enum {string} */
            visibility: "PUBLIC" | "PROTECTED" | "PRIVATE";
        };
        BranchDto: {
            id?: string;
            name?: string;
            isDefault?: boolean;
            /** Format: date-time */
            createdAt?: string;
        };
        CommitDto: {
            id?: string;
            hash?: string;
            author?: string;
            email?: string;
            message?: string;
            /** Format: int32 */
            filesChanged?: number;
            /** Format: int32 */
            linesAdded?: number;
            /** Format: int32 */
            linesRemoved?: number;
            /** Format: date-time */
            createdAt?: string;
        };
        RepositoryDto: {
            id?: string;
            name?: string;
            owner?: string;
            /** Format: uri */
            originalLink?: string;
            /** @enum {string} */
            visibility?: "PUBLIC" | "PROTECTED" | "PRIVATE";
            /** Format: date-time */
            createdAt?: string;
        };
        RepositoryViewDto: {
            owner?: components["schemas"]["ShortUserDto"];
            repository?: components["schemas"]["RepositoryDto"];
            branches?: components["schemas"]["ShortBranchDto"][];
            branch?: components["schemas"]["BranchDto"];
            commit?: components["schemas"]["CommitDto"];
            files?: components["schemas"]["ShortCommitFileDto"][];
            /** Format: int32 */
            commitCount?: number;
        };
        ShortBranchDto: {
            id?: string;
            name?: string;
            isDefault?: boolean;
        };
        ShortCommitFileDto: {
            id?: string;
            name?: string;
            /** @enum {string} */
            type?: "DIRECTORY" | "FILE";
            hash?: string;
        };
        ShortUserDto: {
            id?: string;
            username?: string;
        };
        EntityStatsRequest: {
            query?: string;
            searchFields: string[];
            filter: components["schemas"]["Filter"][];
            xAxisField: string;
            yAxisField?: string;
        };
        Filter: {
            field?: string;
            kind: string;
            params: {
                [key: string]: Record<string, never>;
            };
        };
        EntityStatsDto: {
            items?: components["schemas"]["Item"][];
        };
        Item: {
            xValue?: Record<string, never>;
            yValue?: Record<string, never>;
            /** Format: int64 */
            count?: number;
        };
        EntitySearchRequest: {
            query?: string;
            searchFields: string[];
            pagination: components["schemas"]["Pagination"];
            sort: components["schemas"]["SortOrder"][];
            filter: components["schemas"]["Filter"][];
        };
        Pagination: {
            /** Format: int32 */
            pageIndex?: number;
            /** Format: int32 */
            pageSize?: number;
        };
        SortOrder: {
            field?: string;
            asc?: boolean;
        };
        PageMetadata: {
            /** Format: int64 */
            size?: number;
            /** Format: int64 */
            number?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int64 */
            totalPages?: number;
        };
        PagedModel: {
            content?: Record<string, never>[];
            page?: components["schemas"]["PageMetadata"];
        };
        AstSearchFindReferencesRequest: {
            typename: string;
            types: string[];
        };
        AstNodeDto: {
            id?: string;
            label?: string;
            type?: string;
        };
        AstSearchResultDto: {
            file?: components["schemas"]["CommitFileDto"];
            nodes?: components["schemas"]["AstNodeDto"][];
        };
        CommitFileDto: {
            id?: string;
            name?: string;
            fullPath?: string;
            /** @enum {string} */
            type?: "DIRECTORY" | "FILE";
            hash?: string;
            commit?: string;
            parent?: string;
        };
        AuthRegisterRequest: {
            username: string;
            email: string;
            password: string;
        };
        UserDto: {
            id?: string;
            username?: string;
            email?: string;
            /** @enum {string} */
            visibility?: "PUBLIC" | "PRIVATE";
            /** Format: date-time */
            createdAt?: string;
            isAdmin?: boolean;
        };
        AuthLoginRequest: {
            username: string;
            password: string;
        };
        LoginResponseDto: {
            token?: string;
        };
        AdminSetLinksRequest: {
            links: string[];
        };
        UpdateCurrentUserRequest: {
            oldPassword?: string;
            newPassword?: string;
            /** @enum {string} */
            visibility?: "PUBLIC" | "PRIVATE";
        };
        UpdateRepositoryRequest: {
            name: string;
            /** @enum {string} */
            visibility?: "PUBLIC" | "PROTECTED" | "PRIVATE";
        };
        AdminPatchUserRequest: {
            username: string;
            email: string;
            /** @enum {string} */
            visibility: "PUBLIC" | "PRIVATE";
            /** Format: date-time */
            createdAt: string;
            isAdmin?: boolean;
        };
        AdminPatchRepositoryRequest: {
            name: string;
            owner: string;
            /** @enum {string} */
            visibility: "PUBLIC" | "PROTECTED" | "PRIVATE";
            /** Format: date-time */
            createdAt: string;
            /** Format: uri */
            originalLink: string;
        };
        AdminPatchCommitRequest: {
            hash: string;
            author: string;
            email: string;
            message: string;
            /** Format: int32 */
            filesChanged?: number;
            /** Format: int32 */
            linesAdded?: number;
            /** Format: int32 */
            linesRemoved?: number;
            /** Format: date-time */
            createdAt: string;
        };
        AdminPatchCommitFileRequest: {
            name: string;
            fullPath: string;
            hash?: string;
            parent?: string;
            commit: string;
            originalAuthor: string;
            lastChangedBy: string;
        };
        AdminPatchBranchRequest: {
            name: string;
            repository: string;
            /** Format: date-time */
            createdAt: string;
            isDefault?: boolean;
        };
        AdminPatchAstTreeRequest: {
            /** Format: date-time */
            createdAt: string;
        };
        AdminPatchAstNodeRequest: {
            type: string;
            label: string;
            tree: string;
        };
        FileContentDto: {
            commitFile?: components["schemas"]["CommitFileDto"];
            isBinary?: boolean;
            content?: string;
            /** Format: int32 */
            lines?: number;
            /** Format: int64 */
            bytes?: number;
            hasAst?: boolean;
        };
        AstTreeViewDto: {
            /** Format: int32 */
            depth?: number;
            /** Format: int32 */
            size?: number;
            nodes?: components["schemas"]["AstNodeDto"][];
        };
        FileAstDto: {
            commitFile?: components["schemas"]["CommitFileDto"];
            astTree?: components["schemas"]["AstTreeViewDto"];
        };
        EntityUserDto: {
            id?: string;
            username?: string;
            email?: string;
            /** @enum {string} */
            visibility?: "PUBLIC" | "PRIVATE";
            /** Format: date-time */
            createdAt?: string;
            isAdmin?: boolean;
            /** Format: int32 */
            repositoryCount?: number;
        };
        EntityRepositoryDto: {
            id?: string;
            name?: string;
            owner?: components["schemas"]["ShortUserDto"];
            /** Format: uri */
            originalLink?: string;
            /** @enum {string} */
            visibility?: "PUBLIC" | "PROTECTED" | "PRIVATE";
            /** Format: date-time */
            createdAt?: string;
            /** Format: int32 */
            branchCount?: number;
            /** Format: int32 */
            commitCount?: number;
        };
        EntityCommitDto: {
            id?: string;
            hash?: string;
            author?: string;
            email?: string;
            message?: string;
            /** Format: int32 */
            filesChanged?: number;
            /** Format: int32 */
            linesAdded?: number;
            /** Format: int32 */
            linesRemoved?: number;
            repository?: components["schemas"]["RepositoryWithOwnerDetailsDto"];
            branches?: string[];
            /** Format: int32 */
            branchCount?: number;
            /** Format: int32 */
            fileCount?: number;
            /** Format: int32 */
            fileWithAstCount?: number;
            /** Format: date-time */
            createdAt?: string;
        };
        RepositoryWithOwnerDetailsDto: {
            id?: string;
            name?: string;
            owner?: components["schemas"]["ShortUserDto"];
            /** Format: uri */
            originalLink?: string;
            /** @enum {string} */
            visibility?: "PUBLIC" | "PROTECTED" | "PRIVATE";
            /** Format: date-time */
            createdAt?: string;
        };
        EntityCommitFileDto: {
            id?: string;
            name?: string;
            fullPath?: string;
            /** @enum {string} */
            type?: "DIRECTORY" | "FILE";
            hash?: string;
            parent?: string;
            commit?: components["schemas"]["CommitDto"];
            repository?: components["schemas"]["RepositoryDto"];
            hasAst?: boolean;
            /** Format: int32 */
            branchCount?: number;
            branches?: string[];
            originalAuthor?: string;
            lastChangedBy?: string;
        };
        EntityBranchDto: {
            id?: string;
            name?: string;
            repository?: components["schemas"]["RepositoryWithOwnerDetailsDto"];
            isDefault?: boolean;
            /** Format: date-time */
            createdAt?: string;
            commits?: string[];
            /** Format: int32 */
            commitCount?: number;
        };
        EntityAstTreeDto: {
            id?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: int32 */
            depth?: number;
            /** Format: int32 */
            size?: number;
        };
        EntityAstNodeDto: {
            id?: string;
            label?: string;
            type?: string;
            tree?: string;
            parent?: string;
            children?: string[];
            /** Format: int64 */
            childrenCount?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    createRepository: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRepositoryRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RepositoryViewDto"];
                };
            };
        };
    };
    statsUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntityStatsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EntityStatsDto"];
                };
            };
        };
    };
    queryUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntitySearchRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedModel"];
                };
            };
        };
    };
    statsRepositories: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntityStatsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EntityStatsDto"];
                };
            };
        };
    };
    queryRepositories: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntitySearchRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedModel"];
                };
            };
        };
    };
    statsCommits: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntityStatsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EntityStatsDto"];
                };
            };
        };
    };
    queryCommits: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntitySearchRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedModel"];
                };
            };
        };
    };
    statsCommitFiles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntityStatsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EntityStatsDto"];
                };
            };
        };
    };
    queryCommitFiles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntitySearchRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedModel"];
                };
            };
        };
    };
    statsBranches: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntityStatsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EntityStatsDto"];
                };
            };
        };
    };
    queryBranches: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntitySearchRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedModel"];
                };
            };
        };
    };
    statsAstTrees: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntityStatsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EntityStatsDto"];
                };
            };
        };
    };
    queryAstTrees: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntitySearchRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedModel"];
                };
            };
        };
    };
    statsAstNodes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntityStatsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EntityStatsDto"];
                };
            };
        };
    };
    queryAstNodes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntitySearchRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedModel"];
                };
            };
        };
    };
    importDatabase: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    exportDatabase: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    search: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                commitId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AstSearchFindReferencesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AstSearchResultDto"][];
                };
            };
        };
    };
    authRegister: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthRegisterRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserDto"];
                };
            };
        };
    };
    authLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthLoginRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LoginResponseDto"];
                };
            };
        };
    };
    setCommitBranches: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                commitId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminSetLinksRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setBranchCommits: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                branchId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminSetLinksRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setAstNodeChildren: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                astNodeId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminSetLinksRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCurrentUserInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserDto"];
                };
            };
        };
    };
    updateRepository: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCurrentUserRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserDto"];
                };
            };
        };
    };
    updateRepository_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                repoId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRepositoryRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RepositoryDto"];
                };
            };
        };
    };
    patchUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminPatchUserRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patchRepository: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                repositoryId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminPatchRepositoryRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patchCommit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                commitId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminPatchCommitRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patchCommitFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                commitFileId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminPatchCommitFileRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patchBranch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                branchId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminPatchBranchRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patchAstTree: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                astTreeId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminPatchAstTreeRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patchAstNode: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                astNodeId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminPatchAstNodeRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserDto"];
                };
            };
        };
    };
    getRepositories: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RepositoryDto"][];
                };
            };
        };
    };
    getBranchCommits: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                repoId: string;
                branchId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommitDto"][];
                };
            };
        };
    };
    viewRepository: {
        parameters: {
            query?: {
                path?: string;
            };
            header?: never;
            path: {
                repoId: string;
                branchId: string;
                commitId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RepositoryViewDto"];
                };
            };
        };
    };
    viewRepositoryFileContent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                repoId: string;
                branchId: string;
                commitId: string;
                commitFileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileContentDto"];
                };
            };
        };
    };
    viewRepositoryFileAst: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                repoId: string;
                branchId: string;
                commitId: string;
                commitFileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileAstDto"];
                };
            };
        };
    };
    getUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EntityUserDto"];
                };
            };
        };
    };
    getRepository: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                repositoryId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EntityRepositoryDto"];
                };
            };
        };
    };
    getCommit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                commitId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EntityCommitDto"];
                };
            };
        };
    };
    getCommitFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                commitFileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EntityCommitFileDto"];
                };
            };
        };
    };
    getBranch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                branchId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EntityBranchDto"];
                };
            };
        };
    };
    getAstTree: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                astTreeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EntityAstTreeDto"];
                };
            };
        };
    };
    getAstNode: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                astNodeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EntityAstNodeDto"];
                };
            };
        };
    };
    viewAstTree: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                astTreeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AstTreeViewDto"];
                };
            };
        };
    };
}
