/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/repositories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createRepository"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/db/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["importDatabase"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/db/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["exportDatabase"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["authRegister"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["authLogin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repositories/{repoId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateRepository"];
        trace?: never;
    };
    "/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUserInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/repositories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getRepositories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getCurrentUserInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repositories/{repoId}/branches/{branchId}/commits/{commitId}/view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["viewRepository"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateRepositoryRequest: {
            /** Format: uri */
            originalLink: string;
            name: string;
            /** @enum {string} */
            visibility: "PUBLIC" | "PROTECTED" | "PRIVATE";
        };
        RepositoryDto: {
            id?: string;
            name?: string;
            owner?: string;
            defaultBranch?: string;
            /** Format: uri */
            originalLink?: string;
            /** Format: date-time */
            createdAt?: string;
        };
        AuthRegisterRequest: {
            username: string;
            email?: string;
            password: string;
        };
        UserDto: {
            id?: string;
            username?: string;
            email?: string;
            /** @enum {string} */
            visibility?: "PUBLIC" | "PRIVATE";
            /** Format: date-time */
            createdAt?: string;
            isAdmin?: boolean;
        };
        GrantedAuthority: {
            authority?: string;
        };
        UserDetailsWithId: {
            password?: string;
            username?: string;
            authorities?: components["schemas"]["GrantedAuthority"][];
            accountNonExpired?: boolean;
            accountNonLocked?: boolean;
            credentialsNonExpired?: boolean;
            enabled?: boolean;
            id?: string;
        };
        BranchDto: {
            id?: string;
            name?: string;
            isDefault?: boolean;
            /** Format: date-time */
            createdAt?: string;
        };
        CommitDto: {
            id?: string;
            hash?: string;
            author?: string;
            email?: string;
            message?: string;
            /** Format: int32 */
            filesChanged?: number;
            /** Format: int32 */
            linesAdded?: number;
            /** Format: int32 */
            linesRemoved?: number;
            /** Format: date-time */
            createdAt?: string;
            rootFiles?: components["schemas"]["CommitFileDto"][];
        };
        CommitFileDto: {
            id?: string;
            name?: string;
            /** @enum {string} */
            type?: "DIRECTORY" | "FILE";
            hash?: string;
            commit?: string;
            parent?: string;
        };
        RepositoryViewDto: {
            owner?: components["schemas"]["ShortUserDto"];
            repository?: components["schemas"]["RepositoryDto"];
            branches?: components["schemas"]["ShortBranchDto"][];
            branch?: components["schemas"]["BranchDto"];
            commit?: components["schemas"]["CommitDto"];
            files?: components["schemas"]["ShortCommitFileDto"][];
            /** Format: int32 */
            commitCount?: number;
        };
        ShortBranchDto: {
            id?: string;
            name?: string;
            isDefault?: boolean;
        };
        ShortCommitFileDto: {
            id?: string;
            name?: string;
            /** @enum {string} */
            type?: "DIRECTORY" | "FILE";
        };
        ShortUserDto: {
            id?: string;
            username?: string;
        };
        AuthRegisterRequest: {
            username: string;
            email?: string;
            password: string;
        };
        UserDto: {
            id?: string;
            username?: string;
            email?: string;
            /** @enum {string} */
            visibility?: "PUBLIC" | "PRIVATE";
            /** Format: date-time */
            createdAt?: string;
            isAdmin?: boolean;
        };
        AuthLoginRequest: {
            username: string;
            password: string;
        };
        LoginResponseDto: {
            token?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    createRepository: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRepositoryRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RepositoryViewDto"];
                };
            };
        };
    };
    importDatabase: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    exportDatabase: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    authRegister: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthRegisterRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserDto"];
                };
            };
        };
    };
    authLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthLoginRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LoginResponseDto"];
                };
            };
        };
    };
    updateRepository: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                repoId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RepositoryDto"];
                };
            };
        };
    };
    getUserInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserDto"];
                };
            };
        };
    };
    getRepositories: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RepositoryDto"][];
                };
            };
        };
    };
    getCurrentUserInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserDto"];
                };
            };
        };
    };
    getBranchCommits: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                repoId: string;
                branchId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommitDto"][];
                };
            };
        };
    };
    viewRepository: {
        parameters: {
            query?: {
                path?: string;
            };
            header?: never;
            path: {
                repoId: string;
                branchId: string;
                commitHash: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RepositoryViewDto"];
                };
            };
        };
    };
    getUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserDto"][];
                };
            };
        };
    };
}
